Preferred order of work:
1) more accessibility changes:
  - keyboard arrow key/page up/page down navigation
2) look into progressive web apps
  - https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps
  - https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Offline_Service_workers
  - https://web.dev/learn/pwa/progressive-web-apps/
3) Perk effect selection
  - hip fire grip
  - surplus
  - elemental capacitor
  - field prep
  - opening shot
  - steady hands
  - slideshot
  - slideways
  - well rounded
  - reservoir burst
  - quick access sling
  - figure out full list, will have to search through all perks with insights
4) Masterworks/weapon features:
  - crafted exotics are also special
    - maybe move origin perks into a dedicated slot in SelectedGear? Then perks panel and selected perks can just expand to whatever is in SelectedPerksMap
    - for an intrinsic perk, check if it has a plug set associated with it
    - attach that set to the intrinsic
    - allow toggling through all the options by clicking on the intrinsic?
    - this also works for enhanced intrinsics for legendary weapons, how to include that?
      - legendaries also include this in the reusable plugs on the socket, but that's probably not needed
      - only included on the crafting version of the weapon (with the crafting property on it) - regular weapons don't have it
  - weapon ornaments - they contain a weapon screenshot and can change that for the current weapon
5) Convert category ID and trait ID checks to hashes for everything
  - can rework some stuff too, may need to remove custom catalyst checks


compare section:
  - ideas:
  - each weapon is 1 row
  - stats only display numbers
  - perks, intrinsic, origin, MW, and mod in a straight line on the right side
  - icon + name/type on left side
  - stats in middle
  - what should stat arrows display? green only if highest value in list of weapons being compared?
  - should cache which weapons were selected
  - should have button that goes back to weapon page with that weapon and perks selected
    - if this is done, and "add to comparisons" is clicked - remove the previous one?

Unsure about order:
- have option to alternate to crafted version of a weapon? would should enhanced intrinsic and automatically include crafted bonus
- update perk insights for origin perks, exotic perks, and to include swords stats
- better support for crafted weapons, especially crafted exotics (enhanced intrinsic)
- update weapon formulas when data becomes available (some values are placeholder constants right now)
- "calculations" panel for damage falloff/handling/reload/reserves/etc.
  - make extras panel -> options panel and split out the calculations
  - implement dps/ttk calculations
  - load weapon formulas into the indexed db, retrieve from destiny data service
- Convert masterwork panel to list of icons for each masterwork (with tooltip) instead of buttons + bar?

Bugs:
- perk bonuses display bonuses that aren't applicable to that weapon, e.g. charge time on bows or magazine on swords

Filter features:
- for collections filters - don't seem to include all possible weapons, e.g. multimach isn't in the iron banner filter. change this at some point
- add icons, collections for seasons before season of worthy
- more collections icons https://github.com/justrealmilk/destiny-icons
- only load collection lists + a few other filter-only properties from cache when opening the filter
  - it is an async component so it'll take some time anyway

Load times:
- load background image after manifest has loaded to ensure it doesn't delay page load on low speed connections
  - the home page loads until the background fills in, then it transitions to the weapon page
- show that page is refreshing when game data is being reloaded

Tech debt/processing:
- convert things like weapon category regex to my own enum I can use universally
  - would probably save some space and would simplify a few places constants are duplicated
- to find craftable weapons, find all items with a craftable.outputItemHash and build a lookup map with those
- involve stat display override when creating masterworks in DestinyManifestProcessor
- filter armour plugs out of the kept data (definitely shows up as intrinsics, maybe others too...)
- change PerkColumnNumber to something better
- convert Item Tier Index to hash, as those are stable
- convert as many ID comparisons, etc. as possible to hashes
- Move constants into class/interface, add Destiny2GameData as a property to be cached (hopefully reduce bundle size)
- styling cleanup:
  - put common values into variables in base.css
  - convert to using rem instead of px

Research:
- make perk insights async loading - load when glossary is selected OR a weapon is selected?
- sandbox perks - do they have any info we could want for things other than mods?
- if possible, some feedback from the URL -> weapon list so that the weapon in the URL gets loaded first?
- make use of inventory size stat
- look into precision damage stat, maybe can include that?
- better solution for dealing with enums from bungie-api-ts and isolatedModules?
- look into using getDestinyEntityDefinition and DestinyInventoryItemLiteDefinition to improve load times?
  - DestinyInventoryItemLiteDefinition doesn't have all the info we need, but is ~1/3 the uncompressed size as the normal table
  - we could use those as placeholders while we load the big table in the background
  - additionally, load the first few weapon items in the list manually, and immediately load a weapon if it is clicked
  - if weapon exists in url, need to fetch that definition at the same time as DestinyInventoryItemLiteDefinition
  - problem: doesn't have index property, so no way to sort as we do now. would have to be manual sorting as D2Gunsmith does

Virtual scrolling on displayed weapons:
  - possible to load weapons into the list over time (as they are processed) instead of all at once?
    - is this valuable at all? once processed, the indexed db has everything cached so the only slow down may be the DOM manipulation
  - array of 50 (probably?) container objects for weapon items
  - array of equal length holding HTMLElement for each container
  - on every scroll event, check for any container that is 500px (maybe different value? depends on number of containers?)
    off screen and move it to the top or bottom, depending on direction off screen
    - also move weapon items into a "viewed item" list when they scroll into view
  - map of container position number -> weapon item to display (or null/undefined to not display anything)
  - IDs for containers?
  - can't just base it on position when using constant number of containers because then they'd be flipping
    back and forth between top and bottom if there's too many
  - track size, position of view box and containers?
  - only swap when required?
    - when there are too few elements (< 5?): below the view box when scrolling down, or above the view box when scrolling up
    - track number of containers above/below view box and swap when below threshold
